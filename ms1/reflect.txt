/******************************************************************************                        Assignment 1 - Milestone 1Full Name  : Samarth Sunilkumar PatelStudent ID#: 150061208Email      : sspatel65@myseneca.caSection    : btp100NBBAuthenticity Declaration:I declare this submission is the result of my own work and has not beenshared with any other student or 3rd party content provider. This submittedpiece of work is entirely of my own creation.******************************************************************************/1. I did a lot of training for getting a function by finishing workshops and going to live meetings. Notwithstanding, I confronted a few challenges while I am taking care of task 1. "inputCharOption" was the most difficult function that I confronted. Furthermore, the most troublesome aspect of that function was to show error messages when the entered character esteem didn't happy with the given condition. I made some errors in approving capitalized and lowercase letter values and it gave me a run time mistake. Besides, I couldn't fix that in my program thus, I read week after week material, watched recorded videos that were key material for me, and I looked through a data on the web to handle that issue.2. Yes, it is a good practice sometimes to initialize variables to a "safe empty state". It's essentially the possibility that an object ought to be prepared to use after it has been built. That is, it ought to be in a state that meets the preconditions expected for its part functions (and companions) to work in an obvious way. Fundamentally initialization of variable is simply allotting worth to that variable at the hour of variable declaration. Naturally the worth of variable is null for string datatype and zero for integer. The difference between assigning 0 and NULL is we can only use 0 to primitive numeric type on the other hand we can use null for declaring any other non-primitive datatype.

3. To explain my friend first I need to provide him an example. A buffer is a little locale of memory that holds information briefly and gives moderate storage between a gadget and a program. The framework stores every keystroke in the input buffer, without passing it to the program. The client can alter their information prior to submitting it to the program. simply by squeezing the \n key, the client flags the program to begin extricating information from the buffer. The program then, at that point, just recovers the information that it needs and leaves the rest in the buffer for future recoveries. The figure beneath outlines the buffered input process. On different events, you might have to clear the undesirable buffer to get the following input in the ideal container and not in the buffer of the past variable. For instance, on account of C subsequent to experiencing "scanf()", on the off chance that we want to input a person cluster or character,  we expect to input a person exhibit or a string, we expect to clear the input buffer or, in all likelihood the ideal input is involved by a buffer of the past variable, not by the ideal container.  